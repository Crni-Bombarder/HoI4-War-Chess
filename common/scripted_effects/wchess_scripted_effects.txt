@B_KING   = 1
@W_KING   = 2
@B_QUEEN  = 3
@W_QUEEN  = 4
@B_BISHOP = 5
@W_BISHOP = 6
@B_ROOK   = 7
@W_ROOK   = 8
@B_KNIGHT = 9
@W_KNIGHT = 10
@B_PAWN   = 11
@W_PAWN   = 12
@EMPTY    = 13

@ID_KING   = 0
@ID_QUEEN  = 1
@ID_BISHOP = 2
@ID_ROOK   = 3
@ID_KNIGHT = 4
@ID_PAWN   = 5

@BLACK = 0
@WHITE = 1

@ACTIVATE = 1
@DEACTIVATE = 2

@S_SELECTION = 0
@S_MOVE      = 1

# Function : wchess_create_board
# Initialize in the player context the pieces, highlights and halochecks array.
wchess_create_board = {

    resize_temp_array = {
        array = temp_array
        size = 2
        value = 0
    }
    set_temp_variable = {temp_array^0 = ROOT}
    set_temp_variable = {temp_array^1 = THIS}

    for_each_scope_loop = {
        array = temp_array

        clear_array = wchess_pieces_array
        resize_array = {
            array = wchess_pieces_array
            size = 64
            value = @EMPTY
        }

        clear_array = wchess_highlights_array
        resize_array = {
            array = wchess_highlights_array
            size = 64
            value = @DEACTIVATE
        }

        clear_array = wchess_halochecks_array
        resize_array = {
            array = wchess_halochecks_array
            size = 64
            value = @DEACTIVATE
        }

        # Black pieces
        set_variable = {wchess_pieces_array^0 = @B_ROOK}
        set_variable = {wchess_pieces_array^1 = @B_KNIGHT}
        set_variable = {wchess_pieces_array^2 = @B_BISHOP}
        set_variable = {wchess_pieces_array^3 = @B_QUEEN}
        set_variable = {wchess_pieces_array^4 = @B_KING}
        set_variable = {wchess_pieces_array^5 = @B_BISHOP}
        set_variable = {wchess_pieces_array^6 = @B_KNIGHT}
        set_variable = {wchess_pieces_array^7 = @B_ROOK}
        # Black pawns
        set_variable = {wchess_pieces_array^8  = @B_PAWN}
        set_variable = {wchess_pieces_array^9  = @B_PAWN}
        set_variable = {wchess_pieces_array^10 = @B_PAWN}
        set_variable = {wchess_pieces_array^11 = @B_PAWN}
        set_variable = {wchess_pieces_array^12 = @B_PAWN}
        set_variable = {wchess_pieces_array^13 = @B_PAWN}
        set_variable = {wchess_pieces_array^14 = @B_PAWN}
        set_variable = {wchess_pieces_array^15 = @B_PAWN}

        # White pawns
        set_variable = {wchess_pieces_array^48 = @W_PAWN}
        set_variable = {wchess_pieces_array^49 = @W_PAWN}
        set_variable = {wchess_pieces_array^50 = @W_PAWN}
        set_variable = {wchess_pieces_array^51 = @W_PAWN}
        set_variable = {wchess_pieces_array^52 = @W_PAWN}
        set_variable = {wchess_pieces_array^53 = @W_PAWN}
        set_variable = {wchess_pieces_array^54 = @W_PAWN}
        set_variable = {wchess_pieces_array^55 = @W_PAWN}
        # White pieces
        set_variable = {wchess_pieces_array^56 = @W_ROOK}
        set_variable = {wchess_pieces_array^57 = @W_KNIGHT}
        set_variable = {wchess_pieces_array^58 = @W_BISHOP}
        set_variable = {wchess_pieces_array^59 = @W_KING}
        set_variable = {wchess_pieces_array^60 = @W_QUEEN}
        set_variable = {wchess_pieces_array^61 = @W_BISHOP}
        set_variable = {wchess_pieces_array^62 = @W_KNIGHT}
        set_variable = {wchess_pieces_array^63 = @W_ROOK}
    }
}

# Function : wchess_generic_get_move
# A generic function that compute the possibles moves of a piece
# Inputs : temp_wchess_move_scan_x -| The moves direction ad coordinates offset
#          temp_wchess_move_scan_y -|
#          temp_wchess_move_iter   - Boolean if the moves can be iterated (Straight line)
#          temp_wchess_id          - The initial position id
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The output highlighted positions
wchess_generic_get_move = {
    for_each_loop = {
        array = temp_wchess_move_scan_x
        value = incr_x
        index = iter
        set_temp_variable = {incr_y = temp_wchess_move_scan_y^iter}

        set_temp_variable = {temp_x = temp_wchess_id}
        modulo_temp_variable = {temp_x = 8}
        set_temp_variable = {temp_y = temp_wchess_id}
        divide_temp_variable = {temp_y = 8}
        add_to_temp_variable = {temp_y = -0.5}
        clamp_temp_variable = {
            var = temp_y
            min = 0
            max = 7
        }
        round_temp_variable = temp_y
        
        add_to_temp_variable = {temp_x = incr_x}
        add_to_temp_variable = {temp_y = incr_y}
        set_temp_variable    = {temp_wchess_break_flag = 0}
        while_loop_effect = {
            limit = {
                NOT = {
                    OR = {
                        check_variable = {
                            temp_x < 0
                        }
                        check_variable = {
                            temp_x > 7
                        }
                        check_variable = {
                            temp_y < 0
                        }
                        check_variable = {
                            temp_y > 7
                        }
                        check_variable = {
                            temp_wchess_break_flag = 1
                        }
                    }
                }
            }

            set_temp_variable = {temp_index_xy = temp_y}
            multiply_temp_variable = {temp_index_xy = 8}
            add_to_temp_variable = {temp_index_xy = temp_x}
            set_temp_variable = {temp_wchess_highlights_array^temp_index_xy = @ACTIVATE}

            if = {
                limit = {
                    OR = {
                        check_variable = {
                            var = temp_wchess_piece_array^temp_index_xy
                            value = @EMPTY
                            compare = not_equals
                        }
                        check_variable = {temp_wchess_move_iter = 0}
                    }
                }

                set_temp_variable = {temp_wchess_break_flag = 1}
                if = {
                    limit = {
                        check_variable = {
                            var = temp_wchess_piece_array^temp_index_xy
                            value = @EMPTY
                            compare = not_equals
                        }
                        set_temp_variable = {temp_wchess_piece_value = temp_wchess_piece_array^temp_index_xy}
                        subtract_from_temp_variable = {temp_wchess_piece_value = 1}
                        modulo_temp_variable = {temp_wchess_piece_value = 2}
                        check_variable = {
                            var = temp_wchess_piece_value
                            value = temp_wchess_color
                            compare = equals
                        }
                    }
                    set_temp_variable = {temp_wchess_highlights_array^temp_index_xy = @DEACTIVATE}
                }
            }

            #log = "[?temp_x], [?temp_y], [?temp_index_xy]"
            add_to_temp_variable = {temp_x = incr_x}
            add_to_temp_variable = {temp_y = incr_y}
        }
    }
}

# Function : wchess_get_rook_moves
# This function compute the possible moves of a rook
# Inputs : temp_wchess_id          - The rook position id
#          temp_wchess_color       - Allied color (0 black, 1 white)
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The allowed move array
wchess_get_rook_moves = {
    set_temp_variable = {temp_wchess_move_iter = 1}
    resize_temp_array = {temp_wchess_move_scan_x = 4}
    resize_temp_array = {temp_wchess_move_scan_y = 4}
    set_temp_variable = {temp_wchess_move_scan_x^0 =  1} # Right
    set_temp_variable = {temp_wchess_move_scan_y^0 =  0}
    set_temp_variable = {temp_wchess_move_scan_x^1 =  0} # Bottom
    set_temp_variable = {temp_wchess_move_scan_y^1 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^2 = -1} # Left
    set_temp_variable = {temp_wchess_move_scan_y^2 =  0}
    set_temp_variable = {temp_wchess_move_scan_x^3 =  0} # Top
    set_temp_variable = {temp_wchess_move_scan_y^3 = -1}

    wchess_generic_get_move = yes
}

# Function : wchess_get_bishop_moves
# This function compute the possible moves of a bishop
# Inputs : temp_wchess_id          - The bishop position id
#          temp_wchess_color       - Allied color (0 black, 1 white)
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The allowed move array
wchess_get_bishop_moves = {
    set_temp_variable = {temp_wchess_move_iter = 1}
    resize_temp_array = {temp_wchess_move_scan_x = 4}
    resize_temp_array = {temp_wchess_move_scan_y = 4}
    set_temp_variable = {temp_wchess_move_scan_x^0 =  1} # Bottom-right
    set_temp_variable = {temp_wchess_move_scan_y^0 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^1 = -1} # Bottom-left
    set_temp_variable = {temp_wchess_move_scan_y^1 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^2 = -1} # Top-left
    set_temp_variable = {temp_wchess_move_scan_y^2 = -1}
    set_temp_variable = {temp_wchess_move_scan_x^3 =  1} # Top-right
    set_temp_variable = {temp_wchess_move_scan_y^3 = -1}

    wchess_generic_get_move = yes
}

# Function : wchess_get_queen_moves
# This function compute the possible moves of a queen
# Inputs : temp_wchess_id          - The queen position id
#          temp_wchess_color       - Allied color (0 black, 1 white)
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The allowed move array
wchess_get_queen_moves = {
    set_temp_variable = {temp_wchess_move_iter = 1}
    resize_temp_array = {temp_wchess_move_scan_x = 8}
    resize_temp_array = {temp_wchess_move_scan_y = 8}
    set_temp_variable = {temp_wchess_move_scan_x^0 =  1} # Right
    set_temp_variable = {temp_wchess_move_scan_y^0 =  0}
    set_temp_variable = {temp_wchess_move_scan_x^1 =  0} # Bottom
    set_temp_variable = {temp_wchess_move_scan_y^1 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^2 = -1} # Left
    set_temp_variable = {temp_wchess_move_scan_y^2 =  0}
    set_temp_variable = {temp_wchess_move_scan_x^3 =  0} # Top
    set_temp_variable = {temp_wchess_move_scan_y^3 = -1}
    set_temp_variable = {temp_wchess_move_scan_x^4 =  1} # Bottom-right
    set_temp_variable = {temp_wchess_move_scan_y^4 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^5 = -1} # Bottom-left
    set_temp_variable = {temp_wchess_move_scan_y^5 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^6 = -1} # Top-left
    set_temp_variable = {temp_wchess_move_scan_y^6 = -1}
    set_temp_variable = {temp_wchess_move_scan_x^7 =  1} # Top-right
    set_temp_variable = {temp_wchess_move_scan_y^7 = -1}

    wchess_generic_get_move = yes
}

# Function : wchess_get_knight_moves
# This function compute the possible moves of a queen
# Inputs : temp_wchess_id          - The knight position id
#          temp_wchess_color       - Allied color (0 black, 1 white)
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The allowed move array
wchess_get_knight_moves = {
    set_temp_variable = {temp_wchess_move_iter = 0}
    resize_temp_array = {temp_wchess_move_scan_x = 8}
    resize_temp_array = {temp_wchess_move_scan_y = 8}
    set_temp_variable = {temp_wchess_move_scan_x^0 =  2}
    set_temp_variable = {temp_wchess_move_scan_y^0 = -1}
    set_temp_variable = {temp_wchess_move_scan_x^1 =  2}
    set_temp_variable = {temp_wchess_move_scan_y^1 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^2 = -2}
    set_temp_variable = {temp_wchess_move_scan_y^2 = -1}
    set_temp_variable = {temp_wchess_move_scan_x^3 = -2}
    set_temp_variable = {temp_wchess_move_scan_y^3 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^4 =  1}
    set_temp_variable = {temp_wchess_move_scan_y^4 =  2}
    set_temp_variable = {temp_wchess_move_scan_x^5 = -1}
    set_temp_variable = {temp_wchess_move_scan_y^5 =  2}
    set_temp_variable = {temp_wchess_move_scan_x^6 = -1}
    set_temp_variable = {temp_wchess_move_scan_y^6 = -2}
    set_temp_variable = {temp_wchess_move_scan_x^7 =  1}
    set_temp_variable = {temp_wchess_move_scan_y^7 = -2}

    wchess_generic_get_move = yes
}

# Function : wchess_get_pawn_moves
# This function compute the possible moves of a pawn
# Inputs : temp_wchess_id          - The pawn position id
#          temp_wchess_color       - Allied color (0 black, 1 white)
#          temp_wchess_en_passant  - If not -1, an en passant can be done at that column
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The allowed move array
wchess_get_pawn_moves = {

    # First set the forward direction
    set_temp_variable = {temp_wchess_forward = -8}
    if = {
        limit = {
            check_variable = {temp_wchess_color = @BLACK}
        }
        set_temp_variable = {temp_wchess_forward = 8}
    }

    set_temp_variable    = {temp_x = temp_wchess_id}
    modulo_temp_variable = {temp_x = 8}
    set_temp_variable    = {temp_y = temp_wchess_id}
    divide_temp_variable = {temp_y = 8}
    add_to_temp_variable = {temp_y = -0.5}
    round_temp_variable  = temp_y

    # Attack left
    set_temp_variable = {temp_index_xy = temp_wchess_id}
    add_to_temp_variable = {temp_index_xy = temp_wchess_forward}
    if = {
        limit = {
            check_variable = {
                temp_x > 0
            }
            add_to_temp_variable = {temp_index_xy = -1}
            set_temp_variable = {temp_wchess_piece_value = temp_wchess_piece_array^temp_index_xy}
            OR = {
                # Normal
                AND = {
                    check_variable = {
                        var = temp_wchess_piece_array^temp_index_xy
                        value = @EMPTY
                        compare = not_equals
                    }
                    subtract_from_temp_variable = {temp_wchess_piece_value = 1}
                    modulo_temp_variable = {temp_wchess_piece_value = 2}
                    check_variable = {
                        var = temp_wchess_piece_value
                        value = temp_wchess_color
                        compare = not_equals
                    }
                }
                # En passant
                AND = {
                    check_variable = {
                        var = temp_wchess_en_passant
                        value = -1
                        compare = not_equals
                    }
                    set_temp_variable = {temp_wchess_en_passant_left = temp_wchess_en_passant}
                    subtract_from_temp_variable = {temp_wchess_en_passant_left = temp_x}
                    check_variable = {
                        temp_wchess_en_passant_left = -1
                    }
                    OR = {
                        AND = {
                            check_variable = {temp_wchess_color = @BLACK}
                            check_variable = {temp_y = 4}
                        }
                        AND = {
                            check_variable = {temp_wchess_color = @WHITE}
                            check_variable = {temp_y = 3}
                        }
                    }
                }
            }
        }

        set_temp_variable = {
            temp_wchess_highlights_array^temp_index_xy = @ACTIVATE
        }
    }

    # Attack right
    set_temp_variable = {temp_index_xy = temp_wchess_id}
    add_to_temp_variable = {temp_index_xy = temp_wchess_forward}
    if = {
        limit = {
            check_variable = {
                temp_x < 7
            }
            add_to_temp_variable = {temp_index_xy = 1}
            set_temp_variable = {temp_wchess_piece_value = temp_wchess_piece_array^temp_index_xy}
            OR = {
                # Normal
                AND = {
                    check_variable = {
                        var = temp_wchess_piece_array^temp_index_xy
                        value = @EMPTY
                        compare = not_equals
                    }
                    subtract_from_temp_variable = {temp_wchess_piece_value = 1}
                    modulo_temp_variable = {temp_wchess_piece_value = 2}
                    check_variable = {
                        var = temp_wchess_piece_value
                        value = temp_wchess_color
                        compare = not_equals
                    }
                }
                # En passant
                AND = {
                    check_variable = {
                        var = temp_wchess_en_passant
                        value = -1
                        compare = not_equals
                    }
                    set_temp_variable = {temp_wchess_en_passant_right = temp_wchess_en_passant}
                    subtract_from_temp_variable = {temp_wchess_en_passant_right = temp_x}
                    check_variable = {
                        temp_wchess_en_passant_right = 1
                    }
                    OR = {
                        AND = {
                            check_variable = {temp_wchess_color = @BLACK}
                            check_variable = {temp_y = 4}
                        }
                        AND = {
                            check_variable = {temp_wchess_color = @WHITE}
                            check_variable = {temp_y = 3}
                        }
                    }
                }
            }
        }

        set_temp_variable = {
            temp_wchess_highlights_array^temp_index_xy = @ACTIVATE
        }
    }

    # Move
    set_temp_variable = {temp_index_xy = temp_wchess_id}
    add_to_temp_variable = {temp_index_xy = temp_wchess_forward}

    if = {
        limit = {
            check_variable = {
                temp_wchess_piece_array^temp_index_xy = @EMPTY
            }
        }

        set_temp_variable = {
            temp_wchess_highlights_array^temp_index_xy = @ACTIVATE
        }

        if = {
            limit = {
                add_to_temp_variable = {temp_index_xy = temp_wchess_forward}
                NOT = {
                    check_variable = {
                        temp_index_xy < 0
                    }
                    check_variable = {
                        temp_index_xy > 63
                    }
                }
                OR = {
                    AND = {
                        check_variable = {temp_wchess_color = @BLACK}
                        check_variable = {temp_y = 1}
                    }
                    AND = {
                        check_variable = {temp_wchess_color = @WHITE}
                        check_variable = {temp_y = 6}
                    }
                }
                check_variable = {
                    temp_wchess_piece_array^temp_index_xy = @EMPTY
                }
            }

            set_temp_variable = {
                temp_wchess_highlights_array^temp_index_xy = @ACTIVATE
            }
        }
    }
}

# Function : wchess_get_king_moves
# This function compute the possible moves of a king
# Inputs : temp_wchess_id          - The king position id
#          temp_wchess_color       - Allied color (0 black, 1 white)
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The allowed move array
wchess_get_king_moves = {
    set_temp_variable = {temp_wchess_move_iter = 0}
    resize_temp_array = {temp_wchess_move_scan_x = 8}
    resize_temp_array = {temp_wchess_move_scan_y = 8}
    set_temp_variable = {temp_wchess_move_scan_x^0 =  1} # Right
    set_temp_variable = {temp_wchess_move_scan_y^0 =  0}
    set_temp_variable = {temp_wchess_move_scan_x^1 =  0} # Bottom
    set_temp_variable = {temp_wchess_move_scan_y^1 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^2 = -1} # Left
    set_temp_variable = {temp_wchess_move_scan_y^2 =  0}
    set_temp_variable = {temp_wchess_move_scan_x^3 =  0} # Top
    set_temp_variable = {temp_wchess_move_scan_y^3 = -1}
    set_temp_variable = {temp_wchess_move_scan_x^4 =  1} # Bottom-right
    set_temp_variable = {temp_wchess_move_scan_y^4 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^5 = -1} # Bottom-left
    set_temp_variable = {temp_wchess_move_scan_y^5 =  1}
    set_temp_variable = {temp_wchess_move_scan_x^6 = -1} # Top-left
    set_temp_variable = {temp_wchess_move_scan_y^6 = -1}
    set_temp_variable = {temp_wchess_move_scan_x^7 =  1} # Top-right
    set_temp_variable = {temp_wchess_move_scan_y^7 = -1}

    wchess_generic_get_move = yes
}

# Function : wchess_get_piece_moves
# This function compute the possible moves of a piece
# Inputs : temp_wchess_id          - The piece position id
#          temp_wchess_color       - Allied color (0 black, 1 white)
#          temp_wchess_en_passant  - If not -1, an en passant can be done at that column
#          temp_wchess_piece_array - The input pieces array
# Outputs: temp_wchess_highlights_array - The allowed move array
wchess_get_piece_moves = {
    set_temp_variable    = {temp_wchess_piece_type = temp_wchess_piece_array^temp_wchess_id}
    subtract_from_temp_variable = {temp_wchess_piece_type = 1}
    divide_temp_variable = {temp_wchess_piece_type = 2}
    add_to_temp_variable = {temp_wchess_piece_type = -0.5}
    clamp_temp_variable = {
        var = temp_wchess_piece_type
        min = 0
        max = 6
    }
    round_temp_variable  = temp_wchess_piece_type
    log = "[?temp_wchess_piece_type]"
    if = {
        limit = {
            check_variable = {
                temp_wchess_piece_type = @ID_KING
            }
        }
        wchess_get_king_moves = yes

    } else_if = {
        limit = {
            check_variable = {
                temp_wchess_piece_type = @ID_QUEEN
            }
        }
        wchess_get_queen_moves = yes

    } else_if = {
        limit = {
            check_variable = {
                temp_wchess_piece_type = @ID_BISHOP
            }
        }
        wchess_get_bishop_moves = yes

    } else_if = {
        limit = {
            check_variable = {
                temp_wchess_piece_type = @ID_ROOK
            }
        }
        wchess_get_rook_moves = yes

    } else_if = {
        limit = {
            check_variable = {
                temp_wchess_piece_type = @ID_KNIGHT
            }
        }
        wchess_get_knight_moves = yes

    } else_if = {
        limit = {
            check_variable = {
                temp_wchess_piece_type = @ID_PAWN
            }
        }
        wchess_get_pawn_moves = yes
    }
}